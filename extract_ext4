#!/usr/bin/python3

import struct

# Constants for EXT4 superblock and signature
EXT4_SUPERBLOCK_OFFSET = 1024  # Offset for the EXT4 superblock
EXT4_SIGNATURE = 0xEF53
SUPERBLOCK_SIZE = 1024

def extract_ext4_partitions(input_file, output_prefix):
    with open(input_file, 'rb') as f:
        # Read the entire binary blob
        data = f.read()

    # Initialize partition counter
    partition_count = 0
    offset = 0

    # Scan the entire file without assuming partitions' sizes
    while offset + EXT4_SUPERBLOCK_OFFSET + SUPERBLOCK_SIZE <= len(data):
        superblock_offset = offset + EXT4_SUPERBLOCK_OFFSET
        superblock_data = data[superblock_offset:superblock_offset + SUPERBLOCK_SIZE]

        # Parse the superblock to check for the EXT4 signature
        signature = struct.unpack_from("<H", superblock_data, 0x38)[0]  # EXT4 signature at offset 0x38

        if signature == EXT4_SIGNATURE:
            print(f"EXT4 partition found at offset: {offset}")

            # Here, we assume the partition continues till the next EXT4 superblock or end of file
            next_partition_offset = find_next_ext4_partition(data, offset + 512)  # Start next search after the current position
            if next_partition_offset == -1:
                partition_size = len(data) - offset  # If no more partitions, use till end of file
            else:
                partition_size = next_partition_offset - offset  # Partition size is up to the next partition

            # Extract the partition data
            partition_data = data[offset:offset + partition_size]

            # Write the partition to a new file
            output_file = f"{output_prefix}_partition_{partition_count}.img"
            with open(output_file, 'wb') as p:
                p.write(partition_data)
            
            print(f"Partition {partition_count} saved as {output_file}")
            partition_count += 1

            # Continue searching for the next partition without skipping based on partition size
            offset += 512  # Continue searching 512 bytes forward
        else:
            offset += 512  # Move forward by 512 bytes (block size)

def find_next_ext4_partition(data, start_offset):
    """Helper function to find the next EXT4 partition by searching for the EXT4 signature."""
    offset = start_offset
    while offset + EXT4_SUPERBLOCK_OFFSET + SUPERBLOCK_SIZE <= len(data):
        superblock_offset = offset + EXT4_SUPERBLOCK_OFFSET
        superblock_data = data[superblock_offset:superblock_offset + SUPERBLOCK_SIZE]
        signature = struct.unpack_from("<H", superblock_data, 0x38)[0]
        if signature == EXT4_SIGNATURE:
            return offset  # Return the start of the next partition
        offset += 512  # Continue searching with block alignment
    return -1  # No further partition found

if __name__ == "__main__":
    input_blob = "flash.bin"  # Path to your binary blob file
    output_prefix = "ext4_partition"  # Prefix for the output partition files
    extract_ext4_partitions(input_blob, output_prefix)
